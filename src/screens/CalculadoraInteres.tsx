import { useState } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
} from "recharts";

interface MesData {
  mes: number;
  capitalAcumulado: number;
  aportado: number;
  generado: number;
}

interface A√±oData {
  a√±o: number;
  capitalAcumulado: number;
  aportado: number;
  generado: number;
}

export default function CalculadoraInteres() {
  const [capitalInicial, setCapitalInicial] = useState("");
  const [mensual, setMensual] = useState("");
  const [interes, setInteres] = useState("");
  const [a√±os, setA√±os] = useState("");
  const [datosAnuales, setDatosAnuales] = useState<A√±oData[]>([]);

  const calcular = () => {
    const P = parseFloat(capitalInicial);
    const A = parseFloat(mensual);
    const r = parseFloat(interes) / 100 / 12;
    const n = parseFloat(a√±os) * 12;

    if (isNaN(P) || isNaN(A) || isNaN(r) || isNaN(n)) return;

    const resultadoMensual: MesData[] = [];
    let capitalTotal = P;

    for (let mes = 1; mes <= n; mes++) {
      capitalTotal = capitalTotal * (1 + r) + A;
      const aportado = P + A * mes;
      const generado = capitalTotal - aportado;

      resultadoMensual.push({
        mes,
        capitalAcumulado: parseFloat(capitalTotal.toFixed(2)),
        aportado: parseFloat(aportado.toFixed(2)),
        generado: parseFloat(generado.toFixed(2)),
      });
    }

    const resultadoAnual: A√±oData[] = Array.from(
      { length: Math.ceil(resultadoMensual.length / 12) },
      (_, i) => {
        const index = Math.min((i + 1) * 12 - 1, resultadoMensual.length - 1);
        const fila = resultadoMensual[index];
        return {
          a√±o: i + 1,
          capitalAcumulado: fila.capitalAcumulado,
          aportado: fila.aportado,
          generado: fila.generado,
        };
      }
    );

    setDatosAnuales(resultadoAnual);
  };

  return (
    <div className="min-h-screen bg-gray-950 text-white p-4">
      <div className="max-w-4xl mx-auto bg-gray-900 p-6 rounded-2xl shadow-xl border border-gray-700">
        <h1 className="text-3xl font-bold text-teal-400 mb-6 text-center">
          üìà Calculadora de Inter√©s Compuesto
        </h1>
        <div className="mb-8 text-gray-300 text-base leading-relaxed space-y-4">
          <p>
            Esta calculadora est√° dise√±ada para ayudarte a visualizar c√≥mo crecer√≠a tu capital si aplicas el inter√©s compuesto a lo largo del tiempo. Puedes ajustar la inversi√≥n inicial, la aportaci√≥n mensual, el porcentaje de inter√©s y la duraci√≥n en a√±os para simular diferentes escenarios financieros.
          </p>
          <p>
            Es una herramienta ideal para quienes desean planificar su futuro financiero, ya sea para alcanzar la libertad econ√≥mica, ahorrar para una gran compra o simplemente comprender c√≥mo afecta el tiempo a una inversi√≥n bien gestionada.
          </p>
        </div>
        {/* Explicaci√≥n educativa */}
        <div className="mb-10 text-gray-300 space-y-6 text-base leading-relaxed">
          <h2 className="text-xl font-bold text-white">¬øQu√© es el inter√©s compuesto?</h2>
          <p>
            El inter√©s compuesto es una estrategia de acumulaci√≥n de capital en la que los intereses generados por una inversi√≥n se reinvierten para generar nuevos intereses. Esto crea un efecto "bola de nieve" que puede multiplicar significativamente tu dinero con el paso del tiempo.
          </p>

          <h2 className="text-xl font-bold text-white">¬øC√≥mo funciona?</h2>
          <p>
            Imagina que inviertes 1.000‚ÄØ‚Ç¨. Si esa inversi√≥n genera un 10% anual, al final del primer a√±o tendr√°s 1.100‚ÄØ‚Ç¨. El segundo a√±o, el 10% se aplica sobre 1.100‚ÄØ‚Ç¨, y as√≠ sucesivamente. Cuanto m√°s tiempo dejes tu dinero crecer, mayor ser√° el impacto del inter√©s compuesto.
          </p>

          <h2 className="text-xl font-bold text-white">¬øPor qu√© deber√≠as aprovecharlo?</h2>
          <ul className="list-disc list-inside space-y-2">
            <li>üîÅ Genera intereses sobre intereses.</li>
            <li>‚è≥ Cuanto antes empieces, mayor ser√° tu rentabilidad.</li>
            <li>üìà Ideal para planificar metas financieras a largo plazo como jubilaci√≥n, compra de vivienda o libertad financiera.</li>
          </ul>

          <h2 className="text-xl font-bold text-white">Usa la calculadora y visualiza tu futuro</h2>
          <p>
            Esta herramienta te permite proyectar cu√°nto capital podr√≠as acumular con una aportaci√≥n mensual constante, un inter√©s estimado y el paso del tiempo. Ideal para tomar decisiones inteligentes en tus finanzas personales.
          </p>
        </div>

        {/* Inputs */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block mb-1 text-gray-300">Capital inicial (‚Ç¨)</label>
            <input
              type="number"
              value={capitalInicial}
              onChange={(e) => setCapitalInicial(e.target.value)}
              className="w-full bg-gray-800 border border-gray-600 rounded p-2 text-white"
            />
          </div>
          <div>
            <label className="block mb-1 text-gray-300">Aportaci√≥n mensual (‚Ç¨)</label>
            <input
              type="number"
              value={mensual}
              onChange={(e) => setMensual(e.target.value)}
              className="w-full bg-gray-800 border border-gray-600 rounded p-2 text-white"
            />
          </div>
          <div>
            <label className="block mb-1 text-gray-300">Inter√©s anual (%)</label>
            <input
              type="number"
              value={interes}
              onChange={(e) => setInteres(e.target.value)}
              className="w-full bg-gray-800 border border-gray-600 rounded p-2 text-white"
            />
          </div>
          <div>
            <label className="block mb-1 text-gray-300">Duraci√≥n (a√±os)</label>
            <input
              type="number"
              value={a√±os}
              onChange={(e) => setA√±os(e.target.value)}
              className="w-full bg-gray-800 border border-gray-600 rounded p-2 text-white"
            />
          </div>
        </div>

        <button
          onClick={calcular}
          className="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded w-full font-semibold"
        >
          Calcular
        </button>

        {/* Resultado */}
        {datosAnuales.length > 0 && (
          <>
            <div className="mt-10">
              <h2 className="text-xl font-bold text-teal-400 mb-4">
                üìä Evoluci√≥n del capital (anual)
              </h2>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={datosAnuales}>
                  <CartesianGrid stroke="#444" />
                  <XAxis dataKey="a√±o" stroke="#ccc" />
                  <YAxis stroke="#ccc" />
                  <Tooltip />
                  <Line
                    type="monotone"
                    dataKey="capitalAcumulado"
                    stroke="#14b8a6"
                    name="Capital acumulado"
                  />
                  <Line
                    type="monotone"
                    dataKey="aportado"
                    stroke="#facc15"
                    name="Aportado"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>

            <div className="mt-10 overflow-auto">
              <h2 className="text-xl font-bold text-teal-400 mb-4">üìã Detalle anual</h2>
              <table className="w-full text-sm text-left border border-gray-700 text-gray-300">
                <thead className="bg-gray-800 text-gray-200">
                  <tr>
                    <th className="px-3 py-2">A√±o</th>
                    <th className="px-3 py-2">Capital acumulado (‚Ç¨)</th>
                    <th className="px-3 py-2">Aportado (‚Ç¨)</th>
                    <th className="px-3 py-2">Generado (‚Ç¨)</th>
                  </tr>
                </thead>
                <tbody>
                  {datosAnuales.map((fila, i) => (
                    <tr key={i} className="border-t border-gray-700">
                      <td className="px-3 py-2">{fila.a√±o}</td>
                      <td className="px-3 py-2">
                        {fila.capitalAcumulado.toLocaleString()}
                      </td>
                      <td className="px-3 py-2">{fila.aportado.toLocaleString()}</td>
                      <td className="px-3 py-2 text-green-400">
                        {fila.generado.toLocaleString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
